'use client';

import { createClient } from '@supabase/supabase-js';
import type { Member } from '@/lib/types';

// Notice the `NEXT_PUBLIC_` prefix is required for Next.js to expose the variable to the browser.
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Supabase URL and/or Anon Key are not defined in .env.local');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

export const getMembers = async (): Promise<Member[]> => {
    // When fetching data on the server-side (which is what Next.js does during build and for server components),
    // it's better to create a new client with the service_role key to bypass RLS.
    // This key should be stored securely in environment variables and NOT exposed to the browser.
    const serviceKey = process.env.SUPABASE_SERVICE_KEY;
    if (!serviceKey) {
        console.error('Supabase service key is not defined. Falling back to anon key.');
        const { data, error } = await supabase.from('members').select('*').order('fullName', { ascending: true });
        if (error) {
            console.error('Error fetching members with anon key:', error);
            return [];
        }
        return data.map((member: any) => ({ ...member, birthday: new Date(member.birthday) }));
    }

    const supabaseAdmin = createClient(supabaseUrl, serviceKey);
    const { data, error } = await supabaseAdmin.from('members').select('*').order('fullName', { ascending: true });

    if (error) {
        console.error('Error fetching members:', error);
        return [];
    }

    // Supabase returns dates as strings, so we need to convert them back to Date objects
    return data.map((member: any) => ({
        ...member,
        birthday: new Date(member.birthday),
    }));
};

export const addMember = async (member: Omit<Member, 'id'>): Promise<Member | null> => {
    // The 'id' is now generated by the database, so we don't include it in the insert.
    const { data, error } = await supabase
        .from('members')
        .insert([
            {
                ...member,
                birthday: member.birthday.toISOString().split('T')[0], // Format date for DB
            },
        ])
        .select()
        .single();
    
    if (error) {
        console.error('Error adding member:', error);
        return null;
    }
    
    return data ? { ...data, birthday: new Date(data.birthday) } : null;
}

export const updateMember = async (member: Member): Promise<Member | null> => {
    const { id, ...memberData } = member;
    const { data, error } = await supabase
        .from('members')
        .update({
            ...memberData,
            birthday: memberData.birthday.toISOString().split('T')[0], // Format date for DB
        })
        .eq('id', id)
        .select()
        .single();

    if (error) {
        console.error('Error updating member:', error);
        return null;
    }

    return data ? { ...data, birthday: new Date(data.birthday) } : null;
};
