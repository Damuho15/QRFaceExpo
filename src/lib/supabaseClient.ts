'use client';

import { createClient } from '@supabase/supabase-js';
import type { Member } from '@/lib/types';

// Notice the `NEXT_PUBLIC_` prefix is required for Next.js to expose the variable to the browser.
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Supabase URL and/or Anon Key are not defined in .env.local');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

const BUCKET_NAME = 'member-pictures';

export const uploadMemberPicture = async (file: File): Promise<string | null> => {
    const sanitizedFileName = file.name.replace(/[^a-zA-Z0-9.\-_]/g, '_');
    const fileName = `${Date.now()}-${sanitizedFileName}`;
    const { data, error } = await supabase.storage
        .from(BUCKET_NAME)
        .upload(fileName, file);

    if (error) {
        console.error('Error uploading picture:', error);
        return null;
    }

    const { data: { publicUrl } } = supabase.storage
        .from(BUCKET_NAME)
        .getPublicUrl(data.path);

    return publicUrl;
};

export const getMembers = async (): Promise<Member[]> => {
    const { data, error } = await supabase
        .from('members')
        .select('*')
        .order('fullName', { ascending: true });

    if (error) {
        console.error('Error fetching members:', error);
        return [];
    }

    // Supabase returns dates as strings, so we need to convert them back to Date objects
    return data.map((member: any) => ({
        ...member,
        birthday: member.birthday ? new Date(member.birthday) : new Date(),
        weddingAnniversary: member.weddingAnniversary ? new Date(member.weddingAnniversary) : null,
    }));
};

export const addMember = async (member: Omit<Member, 'id'>): Promise<Member | null> => {
    const memberData: Omit<Member, 'id' | 'birthday' | 'weddingAnniversary' | 'qrCodePayload'> & { birthday: string; weddingAnniversary?: string | null; qrCodePayload: string } = {
        ...member,
        birthday: member.birthday.toISOString().split('T')[0], // Format date for DB
        weddingAnniversary: member.weddingAnniversary ? new Date(member.weddingAnniversary).toISOString().split('T')[0] : null,
        qrCodePayload: member.fullName, // Auto-generate QR payload from full name
    };


    // The 'id' is now generated by the database, so we don't include it in the insert.
    const { data, error } = await supabase
        .from('members')
        .insert([memberData])
        .select()
        .single();
    
    if (error) {
        console.error('Error adding member:', error);
        return null;
    }
    
    return data ? { ...data, birthday: new Date(data.birthday), weddingAnniversary: data.weddingAnniversary ? new Date(data.weddingAnniversary) : null } : null;
}

export const addMembers = async (members: (Omit<Member, 'id' | 'qrCodePayload'> & { qrCodePayload?: string })[]): Promise<Member[] | null> => {
    const membersToInsert = members.map(member => {
        const { pictureUrl, ...rest } = member; // Exclude pictureUrl
        return {
            ...rest,
            birthday: member.birthday ? new Date(member.birthday).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
            weddingAnniversary: member.weddingAnniversary ? new Date(member.weddingAnniversary).toISOString().split('T')[0] : null,
            qrCodePayload: member.fullName,
        }
    });

    const { data, error } = await supabase
        .from('members')
        .insert(membersToInsert)
        .select();

    if (error) {
        console.error('Error batch adding members:', error);
        return null;
    }

    return data ? data.map((member: any) => ({ ...member, birthday: new Date(member.birthday), weddingAnniversary: member.weddingAnniversary ? new Date(member.weddingAnniversary) : null })) : null;
};


export const updateMember = async (member: Member): Promise<Member | null> => {
    const { id, ...memberData } = member;
     const memberToUpdate = {
        ...memberData,
        birthday: memberData.birthday ? new Date(memberData.birthday).toISOString().split('T')[0] : new Date().toISOString().split('T')[0], // Format date for DB
        weddingAnniversary: memberData.weddingAnniversary ? new Date(memberData.weddingAnniversary).toISOString().split('T')[0] : null,
    };
    const { data, error } = await supabase
        .from('members')
        .update(memberToUpdate)
        .eq('id', id)
        .select()
        .single();

    if (error) {
        console.error('Error updating member:', error);
        return null;
    }

    return data ? { ...data, birthday: new Date(data.birthday), weddingAnniversary: data.weddingAnniversary ? new Date(data.weddingAnniversary) : null } : null;
};
